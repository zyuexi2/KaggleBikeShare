geom_bar(stat = "identity") +
labs(title = "Casual Rentals by Weather Condition", x = "Weather Condition", y = "Casual Count") +
scale_x_discrete(labels = c("Clear/Few clouds/Partly cloudy", "Mist + Cloudy", "Light Snow/Light Rain", "Heavy Rain + Thunderstorm/Snow + Fog")) +
theme_minimal()
library(tidyverse)
library(vroom)
library(ggplot2)
bike <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
plot1 <- ggplot(data=bike, aes(x=humidity, y=count)) +
geom_point() +
geom_smooth(se=FALSE)
# numbers of total rentals changes in different seasons
#season -  1 = spring, 2 = summer, 3 = fall, 4 = winter
plot2 <- ggplot(bike, aes(x = factor(season), y = count, fill = factor(season))) +
geom_boxplot() +
labs(title = "Distribution of Rentals by Season", x = "Season", y = "Count") +
scale_x_discrete(labels = c("Spring", "Summer", "Fall", "Winter")) +
theme_minimal()
###The casual rental numbers change with different weathers
plot3 <- ggplot(bike, aes(x = factor(weather), y = casual, fill = factor(weather))) +
geom_bar(stat = "identity") +
labs(title = "Casual Rentals by Weather Condition", x = "Weather Condition", y = "Casual Count") +
scale_x_discrete(labels = c("Clear/Few clouds/Partly cloudy", "Mist + Cloudy", "Light Snow/Light Rain", "Heavy Rain + Thunderstorm/Snow + Fog")) +
theme_minimal()
###
plot4 <- ggplot()+
geom_smooth(data=bike, aes(x=datetime, y=temp), color="blue")+
geom_smooth(data=bike, aes(x=datetime, y =atemp ), color = "red")+
labs(title = "Tempture(blue) vs feels like tempture(red)",x = "Date and Time", y = "Temperature" )
View(plot1)
View(plot2)
View(plot3)
View(plot4)
ggplot(data=bike, aes(x=humidity, y=count)) +
geom_point() +
geom_smooth(se=FALSE)
## ##BikeShare EDA code
##
##Libraries
library(tidyverse)
library(vroom)
library(ggplot2)
bike <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
ggplot(data=bike, aes(x=humidity, y=count)) +
geom_point() +
geom_smooth(se=FALSE)
# numbers of total rentals changes in different seasons
#season -  1 = spring, 2 = summer, 3 = fall, 4 = winter
ggplot(bike, aes(x = factor(season), y = count, fill = factor(season))) +
geom_boxplot() +
labs(title = "Distribution of Rentals by Season", x = "Season", y = "Count") +
scale_x_discrete(labels = c("Spring", "Summer", "Fall", "Winter")) +
theme_minimal()
###The casual rental numbers change with different weathers
ggplot(bike, aes(x = factor(weather), y = casual, fill = factor(weather))) +
geom_bar(stat = "identity") +
labs(title = "Casual Rentals by Weather Condition", x = "Weather Condition", y = "Casual Count") +
scale_x_discrete(labels = c("Clear/Few clouds/Partly cloudy", "Mist + Cloudy", "Light Snow/Light Rain", "Heavy Rain + Thunderstorm/Snow + Fog")) +
theme_minimal()
###
ggplot()+
geom_smooth(data=bike, aes(x=datetime, y=temp), color="blue")+
geom_smooth(data=bike, aes(x=datetime, y =atemp ), color = "red")+
labs(title = "Tempture(blue) vs feels like tempture(red)",x = "Date and Time", y = "Temperature" )
library(recipes)
library(vroom)
library(tidymodels)
library(recipes)
bike <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bike2 <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
myCleanData <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather)) %>%
select( -"casual",-"registered")
myCleanData2 <- bike2 %>%
mutate(weather = ifelse(weather == 4, 3, weather))
my_recipe <- recipe(count ~ .,data = myCleanData)%>%
step_date(datetime, features = c("dow")) %>%
step_dummy(all_nominal_predictors())
prepare_recipe<- prep(my_recipe)
bake(prepare_recipe,new_data = myCleanData)
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = myCleanData)
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
library(tidyverse)
library(vroom)
library(tidymodels)
library(recipes)
bike <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bike2 <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
myCleanData <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather)) %>%
select( -"casual",-"registered")
myCleanData2 <- bike2 %>%
mutate(weather = ifelse(weather == 4, 3, weather))
my_recipe <- recipe(count ~ .,data = myCleanData)%>%
step_date(datetime, features = c("dow")) %>%
step_dummy(all_nominal_predictors())
prepare_recipe<- prep(my_recipe)
bake(prepare_recipe,new_data = myCleanData)
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = myCleanData)
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
View(result)
library(tidyverse)
library(tidymodels)
library(vroom)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
library(tidyverse)
library(tidymodels)
library(vroom)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
my_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
bike_recipe <- prep(bike_recipe)
bake(bike_recipe, new_data = bikeTrain)
bake(bike_recipe, new_data = bikeTest)
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = bikeTrain)
bike_predictions <- predict(bike_workflow, new_data = bikeTest)
bike_predictions$datetime <- as.character(format(bike_predictions$datetime))
result <- data.frame(
datetime = bikeTest$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
my_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_num2factor(weather, levels=c("Sunny", "Mist", "Rain")) %>%
step_num2factor(season, levels=c("Spring", "Summer", "Fall", "Winter")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
bike_recipe <- prep(bike_recipe)
bake(my_recipe, new_data = bikeTrain)
bike_recipe <- prep(my_recipe)
bake(my_recipe, new_data = bikeTrain)
bake(my_recipe, new_data = bikeTest)
bike_recipe <- prep(my_recipe)
bake(my_recipe, new_data = bikeTrain)
bake(my_recipe, new_data = bikeTest)
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
library(tidyverse)
library(vroom)
library(tidymodels)
bike <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bike2 <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
myCleanData <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather)) %>%
select( -"casual",-"registered")
myCleanData2 <- bike2 %>%
mutate(weather = ifelse(weather == 4, 3, weather))
my_recipe <- recipe(count ~ .,data = myCleanData)%>%
step_date(datetime, features = c("dow")) %>%
step_dummy(all_nominal_predictors())
prepare_recipe<- prep(my_recipe)
bake(prepare_recipe,new_data = myCleanData)
my_mod <- linear_reg() %>%
set_engine("lm")
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = myCleanData)
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
bike_predictions$datetime <- as.character(format(bike_predictions$datetime))
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
bike_predictions$datetime <- as.character(format(bike_predictions$datetime))
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
bike_predictions$datetime <- as.character(format(bike_predictions$datetime))
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
bike_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = myCleanData)
bike_predictions <- predict(bike_workflow, new_data = myCleanData2)
bike_predictions$datetime <- as.character(format(bike_predictions$datetime))
result <- data.frame(
datetime = myCleanData2$datetime,
count = bike_predictions
)
colnames(result)[2] <- "count"
result$count <- ifelse(result$count < 0, 0, result$count)
vroom_write(result,"result.csv")
library(tidyverse)
library(tidyverse)
library(tidymodels)
library(vroom)
library(tidyverse)
library(tidymodels)
library(vroom)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
bike_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_mutate(weather=factor(weather, levels=1:3, labels=c("Sunny", "Mist", "Rain"))) %>%
step_mutate(season=factor(season, levels=1:4, labels=c("Spring", "Summer", "Fall", "Winter"))) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
prepped_recipe <- prep(bike_recipe)
bake(prepped_recipe, new_data = bikeTrain)
bake(prepped_recipe, new_data = bikeTest)
## Define the model
lin_model <- linear_reg() %>%
set_engine("lm")
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Get Predictions for test set AND format for Kaggle
test_preds <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=test_preds, file="./TestPreds.csv", delim=",")
View(test_preds)
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file=".result.csv", delim=",")
View(result)
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file=".result.csv", delim=",")
library(vroom)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
bike_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_mutate(weather=factor(weather, levels=1:3, labels=c("Sunny", "Mist", "Rain"))) %>%
step_mutate(season=factor(season, levels=1:4, labels=c("Spring", "Summer", "Fall", "Winter"))) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
prepped_recipe <- prep(bike_recipe)
bake(prepped_recipe, new_data = bikeTrain)
bake(prepped_recipe, new_data = bikeTest)
## Define the model
lin_model <- linear_reg() %>%
set_engine("lm")
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file=".result.csv", delim=",")
vroom_write(x=result, file=".result.csv", delim=",")
library(tidyverse)
library(tidyverse)
library(tidymodels)
library(vroom)
library(vroom)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
bike_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_mutate(weather=factor(weather, levels=1:3, labels=c("Sunny", "Mist", "Rain"))) %>%
step_mutate(season=factor(season, levels=1:4, labels=c("Spring", "Summer", "Fall", "Winter"))) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
prepped_recipe <- prep(bike_recipe)
bake(prepped_recipe, new_data = bikeTrain)
bake(prepped_recipe, new_data = bikeTest)
## Define the model
lin_model <- linear_reg() %>%
set_engine("lm")
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file=".result.csv", delim=",")
View(result)
vroom_write(x=result, file="./result.csv", delim=",")
library(poissonreg)
library(tidyverse)
library(tidymodels)
library(vroom)
library(poissonreg)
install.packages(poissonreg)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
library(vroom)
library(poissonreg)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
library(poissonreg)
installed.packages(poissonreg)
View(bike_recipe)
View(bike_workflow)
View(prepped_recipe)
View(lin_model)
View(bikeTrain)
install.packages("poissonreg")
library(tidyverse)
library(tidymodels)
library(vroom)
library(poissonreg)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
bike_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_mutate(weather=factor(weather, levels=1:3, labels=c("Sunny", "Mist", "Rain"))) %>%
step_mutate(season=factor(season, levels=1:4, labels=c("Spring", "Summer", "Fall", "Winter"))) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
prepped_recipe <- prep(bike_recipe)
bake(prepped_recipe, new_data = bikeTrain)
bake(prepped_recipe, new_data = bikeTest)
## Define the model
lin_model <- linear_reg() %>%
set_engine("lm")
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file="./result.csv", delim=",")
View(result)
library(poissonreg)
bikeTrain <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/train.csv")
bikeTest <- vroom("/Users/cicizeng/Desktop/STA348/KaggleBikeShare/test.csv")
bikeTrain <- bikeTrain %>%
select(-casual, - registered)
bike_recipe <- recipe(count~., data=bikeTrain) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>% #Relabel weather 4 to 3
step_mutate(weather=factor(weather, levels=1:3, labels=c("Sunny", "Mist", "Rain"))) %>%
step_mutate(season=factor(season, levels=1:4, labels=c("Spring", "Summer", "Fall", "Winter"))) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("No", "Yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("No", "Yes"))) %>%
step_time(datetime, features="hour") %>%
step_rm(datetime)
prepped_recipe <- prep(bike_recipe)
bake(prepped_recipe, new_data = bikeTrain)
bake(prepped_recipe, new_data = bikeTest)
## Define the model
lin_model <- linear_reg() %>%
set_engine("lm")
## Set up the whole workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(lin_model) %>%
fit(data=bikeTrain)
## Look at the fitted LM model this way
extract_fit_engine(bike_workflow) %>%
summary()
## Poisson
pois_mod <- poisson_reg() %>% #Type of model
set_engine("glm") # GLM = generalized linear model
bike_pois_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(pois_mod) %>%
fit(data = bikeTrain)
bike_predictions <- predict(bike_pois_workflow,
new_data=testData)
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_pois_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_pois_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
bike_predictions <- predict(bike_pois_workflow,
new_data=bikeTest)
## Get Predictions for test set AND format for Kaggle
result <- predict(bike_pois_workflow, new_data = bikeTest) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
vroom_write(x=result, file="./result.csv", delim=",")
View(pois_mod)
View(lin_model)
View(bike_pois_workflow)
